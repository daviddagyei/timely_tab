(()=>{"use strict";class r{static async getLocal(r){return new Promise(((e,o)=>{chrome.storage.local.get(r,(r=>{chrome.runtime.lastError?(console.error("[Storage] Error reading from local storage:",chrome.runtime.lastError),o(chrome.runtime.lastError)):(console.log("[Storage] Successfully read from local storage:",r),e(r))}))}))}static async setLocal(r){return new Promise(((e,o)=>{chrome.storage.local.set(r,(()=>{chrome.runtime.lastError?(console.error("[Storage] Error saving to local storage:",chrome.runtime.lastError),o(chrome.runtime.lastError)):(console.log("[Storage] Successfully saved to local storage:",Object.keys(r)),e())}))}))}static async getSync(r){return new Promise(((e,o)=>{chrome.storage.sync.get(r,(r=>{chrome.runtime.lastError?(console.error("[Storage] Error reading from sync storage:",chrome.runtime.lastError),o(chrome.runtime.lastError)):(console.log("[Storage] Successfully read from sync storage:",r),e(r))}))}))}static async setSync(r){return new Promise(((e,o)=>{chrome.storage.sync.set(r,(()=>{chrome.runtime.lastError?(console.error("[Storage] Error saving to sync storage:",chrome.runtime.lastError),o(chrome.runtime.lastError)):(console.log("[Storage] Successfully saved to sync storage:",Object.keys(r)),e())}))}))}static async removeLocal(r){return new Promise(((e,o)=>{chrome.storage.local.remove(r,(()=>{chrome.runtime.lastError?(console.error("[Storage] Error removing from local storage:",chrome.runtime.lastError),o(chrome.runtime.lastError)):(console.log("[Storage] Successfully removed from local storage:",r),e())}))}))}static async removeSync(r){return new Promise(((e,o)=>{chrome.storage.sync.remove(r,(()=>{chrome.runtime.lastError?(console.error("[Storage] Error removing from sync storage:",chrome.runtime.lastError),o(chrome.runtime.lastError)):(console.log("[Storage] Successfully removed from sync storage:",r),e())}))}))}}async function e(r){try{await new Promise((r=>{chrome.alarms.clearAll((()=>{console.log("[Background] Cleared all existing alarms"),r()}))})),r.forEach((r=>{try{const e=new Date(`${r.date}T${r.time}`).getTime()-6e5;if(e>Date.now()){const o=`eventReminder|${JSON.stringify(r)}`;chrome.alarms.create(o,{when:e}),console.log("[Background] Scheduled reminder for:",r.title,"at",new Date(e))}else console.log("[Background] Skipping past event:",r.title)}catch(e){console.error("[Background] Error scheduling reminder for event:",r,e)}}))}catch(r){console.error("[Background] Error in scheduleEventReminders:",r)}}chrome.runtime.onInstalled.addListener((()=>{console.log("[Background] Extension installed")})),chrome.alarms.onAlarm.addListener((r=>{if(console.log("[Background] Alarm triggered:",r.name),r.name.startsWith("eventReminder"))try{const e=JSON.parse(r.name.split("|")[1]);chrome.notifications.create({type:"basic",iconUrl:"icon.png",title:"Event Reminder",message:`${e.title} at ${e.time}`}),console.log("[Background] Event reminder notification created for:",e.title)}catch(r){console.error("[Background] Error parsing event info from alarm:",r)}})),chrome.storage.onChanged.addListener(((r,o)=>{if(console.log("[Background] Storage changed in area:",o,"changes:",Object.keys(r)),"local"===o&&r.eventsData){const o=r.eventsData.newValue;o&&(console.log("[Background] Events data changed, rescheduling reminders"),e(o))}})),(async()=>{try{const o=(await r.getLocal(["eventsData"])).eventsData||[];console.log("[Background] Loaded existing events on startup:",o.length),await e(o)}catch(r){console.error("[Background] Error loading events on startup:",r)}})()})();