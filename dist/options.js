(()=>{"use strict";const e=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];function t(e){const t=document.getElementById("notification");t&&(t.textContent=e,t.classList.remove("hide"),setTimeout((()=>{t.classList.add("hide")}),3e3))}function n(e){const t=new Date(e),n=t.getDay();return t.setDate(t.getDate()-n),t.setHours(0,0,0,0),t}function s(e){return e.toISOString().substring(0,10)}function o(e){const[t,n]=e.split(":");return 60*(parseInt(t,10)||0)+(parseInt(n,10)||0)}function a(e){document.documentElement.style.setProperty("--background-color",e.backgroundColor),document.documentElement.style.setProperty("--text-color",e.textColor),document.documentElement.style.setProperty("--primary-color",e.primaryColor),document.documentElement.style.setProperty("--secondary-color",e.secondaryColor),document.documentElement.style.setProperty("--border-color",e.borderColor)}function r(e,t){return"custom"===e&&t?t:"dark"===e?{backgroundColor:"#121212",textColor:"#ffffff",primaryColor:"#bb86fc",secondaryColor:"#03dac6",borderColor:"#333333"}:{backgroundColor:"#ffffff",textColor:"#000000",primaryColor:"#4CAF50",secondaryColor:"#6c757d",borderColor:"#dddddd"}}function i(e,t,n){const s=o(e);let a=o(t);a<=s&&(a+=1440);const r=[];for(let e=s;e<=a;e+=n)r.push(e);return r}function l(t,n,s){const o=[];return i(n,s,t).forEach((t=>{const n=[function(e){const t=Math.floor(e/60)%24,n=t>=12?"PM":"AM";return`${t%12==0?12:t%12}:${(e%60).toString().padStart(2,"0")} ${n}`}(t)];for(let t=0;t<e.length;t++)n.push("");o.push(n)})),o}function c(e,t){if(!e)throw new Error(`Required element with id "${t}" not found`);return e}function d(e){console.log("[DEBUG] parseICalDate input:",e);const t=e.split(";"),n=t[t.length-1].replace(/^.*:/,"");let s;if(8===n.length)s=new Date(parseInt(n.substring(0,4),10),parseInt(n.substring(4,6),10)-1,parseInt(n.substring(6,8),10));else if(n.length>=15){const e=n.replace(/Z$/,"");s=new Date(parseInt(e.substring(0,4),10),parseInt(e.substring(4,6),10)-1,parseInt(e.substring(6,8),10),parseInt(e.substring(9,11),10),parseInt(e.substring(11,13),10),parseInt(e.substring(13,15),10)||0)}else console.warn("[DEBUG] Unrecognized date format:",n),s=new Date;return console.log("[DEBUG] parseICalDate result:",s),s}function m(e){const t={};return e.split(";").forEach((e=>{const[n,s]=e.split("=");n&&s&&(t[n]=s)})),t}class h{static async getLocal(e){return new Promise(((t,n)=>{chrome.storage.local.get(e,(e=>{chrome.runtime.lastError?(console.error("[Storage] Error reading from local storage:",chrome.runtime.lastError),n(chrome.runtime.lastError)):(console.log("[Storage] Successfully read from local storage:",e),t(e))}))}))}static async setLocal(e){return new Promise(((t,n)=>{chrome.storage.local.set(e,(()=>{chrome.runtime.lastError?(console.error("[Storage] Error saving to local storage:",chrome.runtime.lastError),n(chrome.runtime.lastError)):(console.log("[Storage] Successfully saved to local storage:",Object.keys(e)),t())}))}))}static async getSync(e){return new Promise(((t,n)=>{chrome.storage.sync.get(e,(e=>{chrome.runtime.lastError?(console.error("[Storage] Error reading from sync storage:",chrome.runtime.lastError),n(chrome.runtime.lastError)):(console.log("[Storage] Successfully read from sync storage:",e),t(e))}))}))}static async setSync(e){return new Promise(((t,n)=>{chrome.storage.sync.set(e,(()=>{chrome.runtime.lastError?(console.error("[Storage] Error saving to sync storage:",chrome.runtime.lastError),n(chrome.runtime.lastError)):(console.log("[Storage] Successfully saved to sync storage:",Object.keys(e)),t())}))}))}static async removeLocal(e){return new Promise(((t,n)=>{chrome.storage.local.remove(e,(()=>{chrome.runtime.lastError?(console.error("[Storage] Error removing from local storage:",chrome.runtime.lastError),n(chrome.runtime.lastError)):(console.log("[Storage] Successfully removed from local storage:",e),t())}))}))}static async removeSync(e){return new Promise(((t,n)=>{chrome.storage.sync.remove(e,(()=>{chrome.runtime.lastError?(console.error("[Storage] Error removing from sync storage:",chrome.runtime.lastError),n(chrome.runtime.lastError)):(console.log("[Storage] Successfully removed from sync storage:",e),t())}))}))}}class u{constructor(){this.eventsData=[],this.tasksData=[],this.initializeElements(),this.currentWeekStart=n(new Date),this.initialize()}initializeElements(){this.settingsToggleBtn=c(document.getElementById("settings-toggle"),"settings-toggle"),this.settingsPanel=c(document.getElementById("settings-panel"),"settings-panel"),this.timeIncrementSelect=c(document.getElementById("time-increment"),"time-increment"),this.dayStartInput=c(document.getElementById("day-start"),"day-start"),this.dayEndInput=c(document.getElementById("day-end"),"day-end"),this.prevWeekBtn=c(document.getElementById("prev-week-btn"),"prev-week-btn"),this.nextWeekBtn=c(document.getElementById("next-week-btn"),"next-week-btn"),this.editorDiv=c(document.getElementById("editor"),"editor"),this.icsFileInput=c(document.getElementById("ics-file-input"),"ics-file-input"),this.icsImportBtn=c(document.getElementById("ics-import-btn"),"ics-import-btn"),this.themeSelect=c(document.getElementById("theme-select"),"theme-select"),this.customColorsDiv=c(document.getElementById("custom-colors"),"custom-colors"),this.backgroundColorInput=c(document.getElementById("background-color"),"background-color"),this.textColorInput=c(document.getElementById("text-color"),"text-color"),this.primaryColorInput=c(document.getElementById("primary-color"),"primary-color"),this.secondaryColorInput=c(document.getElementById("secondary-color"),"secondary-color"),this.borderColorInput=c(document.getElementById("border-color"),"border-color"),this.addEventBtn=c(document.getElementById("add-event-btn"),"add-event-btn"),this.eventsList=c(document.getElementById("events-list"),"events-list"),this.eventModal=c(document.getElementById("event-modal"),"event-modal"),this.closeEventModal=c(document.getElementById("close-event-modal"),"close-event-modal"),this.saveEventBtn=c(document.getElementById("save-event-btn"),"save-event-btn"),this.eventTitleInput=c(document.getElementById("event-title"),"event-title"),this.eventDateInput=c(document.getElementById("event-date"),"event-date"),this.eventTimeInput=c(document.getElementById("event-time"),"event-time"),this.addTaskBtn=c(document.getElementById("add-task-btn"),"add-task-btn"),this.tasksList=c(document.getElementById("tasks-list"),"tasks-list"),this.taskModal=c(document.getElementById("task-modal"),"task-modal"),this.closeTaskModal=c(document.getElementById("close-task-modal"),"close-task-modal"),this.saveTaskBtn=c(document.getElementById("save-task-btn"),"save-task-btn"),this.taskTitleInput=c(document.getElementById("task-title"),"task-title")}async initialize(){console.log("[Options] Initializing options manager...");try{await this.loadInitialData(),this.setupEventListeners(),await this.loadTimetableData()}catch(e){console.error("[Options] Error during initialization:",e)}}async loadInitialData(){try{const e=await h.getLocal(["timeIncrement","dayStart","dayEnd","weekStart","theme","customColors","eventsData","tasksData"]);this.timeIncrementSelect.value=e.timeIncrement||"60",this.dayStartInput.value=e.dayStart||"08:00",this.dayEndInput.value=e.dayEnd||"22:00",e.weekStart?this.currentWeekStart=new Date(e.weekStart):(this.currentWeekStart=n(new Date),await h.setLocal({weekStart:this.currentWeekStart.toISOString()}));const t=e.theme||"light";this.themeSelect.value=t,this.updateCustomColorsVisibility(t);const s=e.customColors||{backgroundColor:"#ffffff",textColor:"#000000",primaryColor:"#4CAF50",secondaryColor:"#6c757d",borderColor:"#dddddd"};this.backgroundColorInput.value=s.backgroundColor||"#ffffff",this.textColorInput.value=s.textColor||"#000000",this.primaryColorInput.value=s.primaryColor||"#4CAF50",this.secondaryColorInput.value=s.secondaryColor||"#6c757d",this.borderColorInput.value=s.borderColor||"#dddddd",a(r(t,s)),this.eventsData=e.eventsData||[],this.tasksData=e.tasksData||[],this.displayEvents(),this.displayTasks(),console.log("[Options] Initial data loaded successfully")}catch(e){console.error("[Options] Error loading initial data:",e)}}setupEventListeners(){this.settingsToggleBtn.addEventListener("click",(()=>{this.toggleSettingsPanel()})),this.timeIncrementSelect.addEventListener("change",(()=>{this.handleTimeIncrementChange()})),this.dayStartInput.addEventListener("change",(()=>{this.handleDayStartChange()})),this.dayEndInput.addEventListener("change",(()=>{this.handleDayEndChange()})),this.prevWeekBtn.addEventListener("click",(()=>{this.navigateWeek(-1)})),this.nextWeekBtn.addEventListener("click",(()=>{this.navigateWeek(1)})),this.icsImportBtn.addEventListener("click",(()=>{this.handleICSImport()})),this.themeSelect.addEventListener("change",(()=>{this.handleThemeChange()})),[this.backgroundColorInput,this.textColorInput,this.primaryColorInput,this.secondaryColorInput,this.borderColorInput].forEach((e=>{e.addEventListener("input",(()=>{this.handleCustomColorChange()}))})),this.addEventBtn.addEventListener("click",(()=>{this.openEventModal()})),this.closeEventModal.addEventListener("click",(()=>{this.closeEventModalHandler()})),this.saveEventBtn.addEventListener("click",(()=>{this.saveEvent()})),this.addTaskBtn.addEventListener("click",(()=>{this.openTaskModal()})),this.closeTaskModal.addEventListener("click",(()=>{this.closeTaskModalHandler()})),this.saveTaskBtn.addEventListener("click",(()=>{this.saveTask()}))}toggleSettingsPanel(){this.settingsPanel.classList.contains("hide")?(this.settingsPanel.classList.remove("hide"),this.settingsToggleBtn.textContent="Settings ▲"):(this.settingsPanel.classList.add("hide"),this.settingsToggleBtn.textContent="Settings ▼")}async handleTimeIncrementChange(){if(confirm("Changing time increment resets this week. Continue?"))try{await h.setLocal({timeIncrement:this.timeIncrementSelect.value}),console.log("[Options] Time increment changed to",this.timeIncrementSelect.value),await this.resetCurrentWeekData()}catch(e){console.error("[Options] Error changing time increment:",e)}else try{const e=await h.getLocal(["timeIncrement"]);this.timeIncrementSelect.value=e.timeIncrement||"60"}catch(e){console.error("[Options] Error reverting time increment:",e)}}async handleDayStartChange(){try{await h.setLocal({dayStart:this.dayStartInput.value}),console.log("[Options] Day start changed to",this.dayStartInput.value),await this.resetCurrentWeekData()}catch(e){console.error("[Options] Error changing day start:",e)}}async handleDayEndChange(){try{await h.setLocal({dayEnd:this.dayEndInput.value}),console.log("[Options] Day end changed to",this.dayEndInput.value),await this.resetCurrentWeekData()}catch(e){console.error("[Options] Error changing day end:",e)}}async resetCurrentWeekData(){const e=s(this.currentWeekStart);console.log("[Options] Resetting data for week:",e);try{const t=(await h.getLocal(["weekMap"])).weekMap||{};delete t[e],await h.setLocal({weekMap:t}),console.log("[Options] Week data reset, reloading timetable..."),await this.loadTimetableData()}catch(e){console.error("[Options] Error resetting week data:",e)}}async navigateWeek(e){this.currentWeekStart.setDate(this.currentWeekStart.getDate()+7*e);try{await h.setLocal({weekStart:this.currentWeekStart.toISOString()}),console.log("[Options] Navigated to week:",this.currentWeekStart.toISOString()),await this.loadTimetableData()}catch(e){console.error("[Options] Error navigating week:",e)}}handleICSImport(){const e=this.icsFileInput.files?.[0];if(!e)return void alert("Please select an ICS file first.");const n=new FileReader;n.onload=e=>{try{const t=e.target?.result,n=function(e){console.log("[DEBUG] parseICS: parsing ICS data"),console.log("[DEBUG] Raw ICS content length:",e.length);const t=[],n=e.split(/\r?\n/);let s=null;for(let e=0;e<n.length;e++){const o=n[e].trim();if(o.startsWith("BEGIN:VEVENT"))s={},console.log("[DEBUG] Found BEGIN:VEVENT");else if(o.startsWith("END:VEVENT"))s&&(t.push(s),console.log("[DEBUG] Found END:VEVENT, pushed event:",s)),s=null;else if(s&&o.includes(":")){const e=o.indexOf(":"),t=o.substring(0,e).trim(),n=o.substring(e+1).trim();switch(t){case"SUMMARY":s.summary=n,console.log("[DEBUG] SUMMARY =",n);break;case"DTSTART":try{s.start=d(n),console.log("[DEBUG] DTSTART =",n,"->",s.start)}catch(e){console.error("[DEBUG] Error parsing DTSTART:",e)}break;case"DTEND":try{s.end=d(n),console.log("[DEBUG] DTEND =",n,"->",s.end)}catch(e){console.error("[DEBUG] Error parsing DTEND:",e)}break;case"RRULE":s.rrule=m(n),console.log("[DEBUG] RRULE =",n,"->",s.rrule)}}}return console.log("[DEBUG] parseICS -> final events array:",t),t}(t);console.log("[Options] ICS events parsed:",n),this.importMultiWeekEvents(n)}catch(e){console.error("[Options] Error parsing ICS file:",e),t("Error parsing ICS file")}},n.readAsText(e)}async importMultiWeekEvents(e){console.log("[Options] Importing multi-week events:",e.length);try{const n=await h.getLocal(["weekMap","timeIncrement","dayStart","dayEnd"]),o=n.weekMap||{},a=parseInt(n.timeIncrement||"60",10),r=n.dayStart||"08:00",i=n.dayEnd||"22:00";for(const t of e){if(!t.start||!t.end||!t.summary){console.warn("[Options] Skipping event with missing fields:",t);continue}t.end<t.start&&(console.log("[Options] Event end < start. Swapping..."),[t.start,t.end]=[t.end,t.start]),console.log("[Options] Processing event:",t.summary,"Start:",t.start,"End:",t.end);const e=this.getAllWeekStartsInRange(t.start,t.end);console.log("[Options] Weeks spanned:",e.map((e=>e.toISOString().substring(0,10))));for(const n of e){const e=s(n);let c=o[e];c||(console.log("[Options] Creating new empty table for week:",e),c=l(a,r,i)),this.placeEventInSingleWeek(c,n,t.start,t.end,t.summary,a,r,i),o[e]=c}}await h.setLocal({weekMap:o}),console.log("[Options] Multi-week ICS import completed"),t("Multi-week ICS schedule imported!"),await this.loadTimetableData()}catch(e){console.error("[Options] Error importing multi-week events:",e),t("Error importing ICS file")}}placeEventInSingleWeek(e,t,n,s,o,a,r,l){const c=new Date(t),d=new Date(t);if(d.setDate(d.getDate()+6),console.log("[Options] Placing event in week:",t.toISOString().substring(0,10),"event:",o,"range:",n,"-",s),s<c||n>d)return void console.log("[Options] No overlap with this week. Skipping.");const m=i(r,l,a);for(let a=0;a<7;a++){const r=a+1,i=new Date(t);i.setDate(t.getDate()+a);for(let t=0;t<e.length;t++){const a=m[t],l=new Date(i);l.setHours(Math.floor(a/60),a%60,0,0),l>=n&&l<s&&(console.log("[Options] Placing",o,"in row",t,"col",r,"time",l),e[t][r]=o)}}}getAllWeekStartsInRange(e,t){const s=[];let o=n(e);const a=n(t);for(;o<=a;)s.push(new Date(o)),o.setDate(o.getDate()+7);return s}handleThemeChange(){const e=this.themeSelect.value;this.updateCustomColorsVisibility(e),a("custom"===e?this.getCustomColors():r(e)),this.saveThemePrefs()}handleCustomColorChange(){"custom"===this.themeSelect.value&&(a(this.getCustomColors()),this.saveThemePrefs())}updateCustomColorsVisibility(e){this.customColorsDiv.style.display="custom"===e?"block":"none"}getCustomColors(){return{backgroundColor:this.backgroundColorInput.value,textColor:this.textColorInput.value,primaryColor:this.primaryColorInput.value,secondaryColor:this.secondaryColorInput.value,borderColor:this.borderColorInput.value}}async saveThemePrefs(){const e=this.themeSelect.value;let t;"custom"===e&&(t=this.getCustomColors());try{await h.setLocal({theme:e,customColors:t}),console.log("[Options] Theme preferences saved")}catch(e){console.error("[Options] Error saving theme preferences:",e)}}openEventModal(){this.eventModal.classList.remove("hide")}closeEventModalHandler(){this.eventModal.classList.add("hide"),this.clearEventForm()}async saveEvent(){const e={title:this.eventTitleInput.value.trim(),date:this.eventDateInput.value,time:this.eventTimeInput.value};if(e.title&&e.date&&e.time){this.eventsData.push(e);try{await h.setLocal({eventsData:this.eventsData}),t("Event saved!"),this.displayEvents(),this.closeEventModalHandler()}catch(e){console.error("[Options] Error saving event:",e),t("Error saving event")}}else alert("Please fill in all event fields.")}displayEvents(){this.eventsList.innerHTML="",this.eventsData.forEach(((e,t)=>{const n=document.createElement("li");n.textContent=`${e.date} ${e.time}: ${e.title}`;const s=document.createElement("button");s.textContent="Delete",s.addEventListener("click",(()=>{this.deleteEvent(t)})),n.appendChild(s),this.eventsList.appendChild(n)}))}async deleteEvent(e){this.eventsData.splice(e,1);try{await h.setLocal({eventsData:this.eventsData}),t("Event deleted!"),this.displayEvents()}catch(e){console.error("[Options] Error deleting event:",e),t("Error deleting event")}}clearEventForm(){this.eventTitleInput.value="",this.eventDateInput.value="",this.eventTimeInput.value=""}openTaskModal(){this.taskModal.classList.remove("hide")}closeTaskModalHandler(){this.taskModal.classList.add("hide"),this.clearTaskForm()}async saveTask(){const e=this.taskTitleInput.value.trim();if(!e)return void alert("Please enter a task title.");const n={title:e};this.tasksData.push(n);try{await h.setLocal({tasksData:this.tasksData}),t("Task saved!"),this.displayTasks(),this.closeTaskModalHandler()}catch(e){console.error("[Options] Error saving task:",e),t("Error saving task")}}displayTasks(){this.tasksList.innerHTML="",this.tasksData.forEach(((e,t)=>{const n=document.createElement("li");n.textContent=e.title;const s=document.createElement("button");s.textContent="Delete",s.addEventListener("click",(()=>{this.deleteTask(t)})),n.appendChild(s),this.tasksList.appendChild(n)}))}async deleteTask(e){this.tasksData.splice(e,1);try{await h.setLocal({tasksData:this.tasksData}),t("Task deleted!"),this.displayTasks()}catch(e){console.error("[Options] Error deleting task:",e),t("Error deleting task")}}clearTaskForm(){this.taskTitleInput.value=""}async loadTimetableData(){const e=s(this.currentWeekStart);console.log("[Options] Loading timetable for week:",e);try{const t=await h.getLocal(["weekMap","timeIncrement","dayStart","dayEnd"]),n=t.weekMap||{};let s=n[e];if(!s){console.log("[Options] No data found for week, creating empty table...");const o=parseInt(t.timeIncrement||"60",10);s=l(o,t.dayStart||"08:00",t.dayEnd||"22:00"),n[e]=s,await h.setLocal({weekMap:n})}this.createEditor(s)}catch(e){console.error("[Options] Error loading timetable data:",e)}}createEditor(t){console.log("[Options] Creating timetable editor");let n='<table id="timetable-editor"><thead><tr>';n+="<th>Time</th>";for(let t=0;t<7;t++){const s=new Date(this.currentWeekStart);s.setDate(s.getDate()+t);const o=e[s.getDay()],a=s.toLocaleDateString([],{month:"short",day:"numeric"});n+=`<th>${o} (${a})</th>`}n+="</tr></thead><tbody>",t.forEach(((e,t)=>{n+='<tr class="timetable-row">',e.forEach(((e,s)=>{n+=0===s?`<td class="time-label">${e}</td>`:`\n            <td class="schedule-cell" data-row="${t}" data-col="${s}">\n              ${e?`<div class="schedule-item"><span class="drag-handle">☰</span><span class="item-content">${e}</span></div>`:""}\n            </td>`})),n+="</tr>"})),n+="</tbody></table>",this.editorDiv.innerHTML=n,this.initSortable(),this.initDragAndDrop(),this.initEditScheduleItems(),console.log("[Options] Timetable editor created with",t.length,"rows")}async autoSaveTimetable(){console.log("[Options] Auto-saving timetable...");const e=s(this.currentWeekStart),t=document.querySelectorAll(".timetable-row"),n=[];t.forEach((e=>{const t=[],s=e.querySelector(".time-label")?.textContent||"";t.push(s),e.querySelectorAll(".schedule-cell").forEach((e=>{const n=e.querySelector(".schedule-item .item-content");t.push(n&&n.textContent||"")})),n.push(t)}));try{const t=(await h.getLocal(["weekMap"])).weekMap||{};t[e]=n,await h.setLocal({weekMap:t}),console.log("[Options] Timetable auto-saved successfully")}catch(e){console.error("[Options] Error auto-saving timetable:",e)}}initSortable(){const e=document.getElementById("timetable-editor");e&&e.querySelector("tbody")&&console.log("[Options] Sortable initialized for timetable rows")}initDragAndDrop(){console.log("[Options] Drag and drop initialized for schedule items")}initEditScheduleItems(){document.querySelectorAll(".schedule-cell").forEach((e=>{e.addEventListener("dblclick",(()=>{let t="";const n=e.querySelector(".schedule-item");if(n){const e=n.querySelector(".item-content");t=e?.textContent||""}const s=t,o=document.createElement("input");o.type="text",o.value=t,e.innerHTML="",e.appendChild(o),o.focus();const a=()=>{const t=o.value.trim();if(e.innerHTML="",t){const n=document.createElement("div");n.className="schedule-item",n.innerHTML=`<span class="drag-handle">☰</span><span class="item-content">${t}</span>`,e.appendChild(n),this.initDragAndDrop()}console.log("[Options] Double-click edit completed, auto-saving..."),this.autoSaveTimetable()};o.addEventListener("blur",a),o.addEventListener("keydown",(t=>{if("Enter"===t.key)a();else if("Escape"===t.key&&(e.removeChild(o),s)){const t=document.createElement("div");t.className="schedule-item",t.innerHTML=`<span class="drag-handle">☰</span><span class="item-content">${s}</span>`,e.appendChild(t),this.initDragAndDrop()}}))}))}))}}document.addEventListener("DOMContentLoaded",(()=>{new u}))})();